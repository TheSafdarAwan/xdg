* Bootstrap Packages Archieve's
    #+begin_src emacs-lisp
	(require 'package)
	(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
	(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
	(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
	(package-initialize)
    #+end_src

* FONT Setting's
    #+begin_src emacs-lisp
    (set-face-attribute 'default nil
    :font "FiraCode Nerd Font")

    ;; line spacing
    (setq-default line-spacing 0.09)
    #+end_src

* Package Manager 
    #+begin_src emacs-lisp
      ;; ensure that packages are installed
      (require 'use-package-ensure)
      ;; OR
      ;; (require 'use-package)
      (setq use-package-always-ensure t)

      (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    #+end_src

* STARTUP PERFORMANCE
  This section is where it make emacs faster to load.
** Garbage collection
    Makes startup faster by reducing the frequency of garbage collection
    + ivy-posframe-display-at-frame-top-center

    =NOTE:= If the setting for 'ivy-posframe-display' is set to 'nil'
    (false), anything that is set to 'ivy-display-function-fallback' will
    just default to their normal position in Doom Emacs (usually a bottom
    split).  However, if this is set to 't' (true), then the fallback
    position will be centered in the window.

    #+begin_src emacs-lisp
      (use-package ivy-posframe
	  :init
	  (setq ivy-posframe-display-functions-alist
	  '((swiper                     . ivy-posframe-display-at-point)
	      (complete-symbol            . ivy-posframe-display-at-point)
	      (counsel-M-x                . ivy-display-function-fallback)
	      (counsel-esh-history        . ivy-posframe-display-at-window-center)
	      (counsel-describe-function  . ivy-display-function-fallback)
	      (counsel-describe-variable  . ivy-display-function-fallback)
	      (counsel-find-file          . ivy-display-function-fallback)
	      (counsel-recentf            . ivy-display-function-fallback)
	      (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
	      (dmenu                      . ivy-posframe-display-at-frame-top-center)
	      (nil                        . ivy-posframe-display))
	  ivy-posframe-height-alist
	  '((swiper . 20)
	      (dmenu . 20)
	      (t . 10)))
	  :config
	  (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.
    #+end_src

* Add Vim bindings
** evil-mode
    #+begin_src emacs-lisp
      (use-package evil
	  :init      ;; tweak evil's configuration before loading it
	      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
	      ;; (setq evil-want-keybinding nil)
	      (setq evil-vsplit-window-right t)
	      (setq evil-split-window-below t)
	      (setq evil-want-C-u-scroll t)
	      (setq evil-want-C-i-jump t)
	  :config
	       (evil-mode 1)
	       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	       (evil-set-initial-state 'messages-buffer-mode 'normal)
	       ;; enable the undo functionality
	       (evil-set-undo-system 'undo-redo) 
	   )
	  ;; extend evil mode to other modes
	  (defun rune/evil-hook()
	      (dolist
		  (mode '(
			  custom-mode
			  eshell-mode
			  git-rebase-mode
			  erc-mode
			  circe-server-mode
			  circe-chat-mode
			  circe-query-mode
			  sauron-mode
			  term-mode
			)
		  )
		  (add-to-list 'evil-emacs-state-modes mode)
	      )
	  )
    #+end_src
** Evil Mode Extensions
    #+begin_src emacs-lisp
      ;; (use-package evil-collection
      ;;     :after evil
      ;;     :config
      ;; 	(add-to-list 'evil-collection-mode-list '(magit magit-repos dired ibuffer))
      ;; 	(evil-collection-init)
      ;; )
      ;; install surround
      (use-package evil-surround
	  :config
	      (global-evil-surround-mode 1)
      )
    #+end_src

** General
   #+begin_src emacs-lisp
     (use-package general
	 :after evil
	 :config
	     (general-evil-setup t)
     )
   #+end_src

* Completion
** Mini Buffer Completion
    #+begin_src emacs-lisp
      (use-package ivy
	 :diminish
	 :demand
	 :bind(
	     :map ivy-minibuffer-map
		 ("TAB" . ivy-alt-done)
		 ("C-l" . ivy-alt-done)
		 ;; ("C-j" . ivy-next-line)
		 ;; ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
		 ("C-l" . ivy-done)
		 ;; ("C-k" . ivy-previous-line)
		 ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
		 ;; ("C-k" . ivy-previous-line)
		 ("C-d" . ivy-reverse-i-search-kill)
	 )
	 :config
	 (ivy-mode 1)
       )
      (use-package counsel
	:bind (
		("M-x" . counsel-M-x)
		("C-x b" . counsel-ibuffer)
		("C-x C-f" . counsel-find-file)
		:map minibuffer-local-map
		  ("C-r" . 'counsel-minibuffer-history)
	      )
	:config
	  (setq ivy-initial-inputs-alist nil) ;; don't start search with ^
	  ;; add keymap for swiper
	  (global-set-key (kbd "M-s") 'swiper)
          ;; buffer switcher
	  (global-set-key (kbd "C-M-b") 'counsel-switch-buffer)
      )	
       ;; extend ivy
       (use-package ivy-rich
	 :init
	   (ivy-rich-mode 1)
       )
    #+end_src

* Language Support

    #+begin_src emacs-lisp
    (use-package lua-mode)
    (use-package markdown-mode)
    #+end_src

* Neotree
    Neotree is a file tree viewer.

    | COMMAND        | DESCRIPTION    | KEYBINDING |
    |----------------+----------------+------------|
    | neotree-toggle | /Toggle neotree/ | Alt-e      |

    #+begin_src emacs-lisp
    (use-package neotree
	:config
	    (global-set-key (kbd "M-e") 'neotree-toggle)
    )
    #+end_src

* Other Helpful Packages
** Rainbow Delimiters
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
	:hook (
	    (prog-mode . rainbow-delimiters-mode)
	    (org-mode . rainbow-delimiters-mode)
	  )
      )
    #+end_src
** Helpful make documenation nice
    #+begin_src emacs-lisp
      (use-package helpful
	:config
	  ;; Note that the built-in `describe-function' includes both functions
	  ;; and macros. `helpful-function' is functions only, so we provide
	  ;; `helpful-callable' as a drop-in replacement.
	  (global-set-key (kbd "C-h f") #'helpful-callable)

	  (global-set-key (kbd "C-h v") #'helpful-variable)
	  (global-set-key (kbd "C-h k") #'helpful-key)
	  (global-set-key (kbd "C-h x") #'helpful-command)

	  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
	  ;; for this in lisp modes.
	  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

	  ;; Look up *F*unctions (excludes macros).
	  ;;
	  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
	  ;; already links to the manual, if a function is referenced there.
	  (global-set-key (kbd "C-h F") #'helpful-function)

	  ;; For ivy
          (setq counsel-describe-function-function #'helpful-callable)
          (setq counsel-describe-variable-function #'helpful-variable)
      )
    #+end_src
** Undo-tree to get undo functionality
   #+begin_src emacs-lisp
     (use-package undo-tree
       :config
         (global-undo-tree-mode 1)
     )
   #+end_src

* Note Taking
** Org
    #+begin_src emacs-lisp
      (use-package org
	  :after evil-collection
	  ;; ignore org-mode from upstream and use a manually installed version
	  ;;:pin manual
	  :config
	    (setq org-hide-emphasis-markers t)
	    (setq org-ellipsis " ▾")
	      ;; Set faces for heading levels
	    (dolist (face 
		     '(
			(org-level-1 . 1.5)
			(org-level-2 . 1.3)
			(org-level-3 . 1.2)
			(org-level-4 . 1.1)
			(org-level-5 . 1.1)
			(org-level-6 . 1.1)
			(org-level-7 . 1.1)
			(org-level-8 . 1.1)
		       )
		    )
		(set-face-attribute (car face) nil
                          :font "Roboto" :weight 'Bold :height (cdr face))
	    )
	    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
	    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
	    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
	    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
	    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
	    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
	    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
	    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
	    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
	    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
	    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
	    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

	    ;; replace list hypehen(-) with dot
	    (font-lock-add-keywords
		'org-mode
			'(("^ *\\([-]\\) "
			    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))
	    )
      )
    #+end_src
 
** Org-bullets
    #+begin_src emacs-lisp
    (use-package org-bullets
        :init
	    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
        :custom
	    (org-bullets-bullet-list 
              '("◉" "○" "●" "○" "●" "○" "●")
            )
    )
    #+end_src

    #+begin_src emacs-lisp
	(setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
	    '((sequence
		"TODO(t)"           ; A task that is ready to be tackled
		"WAIT(w)"           ; Something is holding up this task
		"DOING(d)"          ; When i am doing a task
		"|"                 ; The pipe necessary to separate "active" states and "inactive" states
		"DONE(D)"           ; Task has been completed
		"CANCELLED(c)" )))  ; Task has been cancelled
    #+end_src

** Org Roam
  #+begin_src emacs-lisp
    (use-package org-roam
      :config
	;; (setq find-file-visit-truename t) ;; resolve the symalink problems
	(setq org-roam-directory (file-truename "~/safdar-local/org-roam"))
	(org-roam-db-autosync-mode)
    )
    (use-package org-roam-ui)
  #+end_src
* Git
** Magit
    #+begin_src emacs-lisp
      (use-package magit
	  :init
	      (message "Loading Magit!")
	  :config
	      (message "Loaded Magit!")
	  :bind (("C-x g" . magit-status)
		  ("C-x C-g" . magit-status))
      )
    #+end_src	    

* Themes
** Dracula
    #+begin_src emacs-lisp
	(use-package dracula-theme
	    :config
		;;(load-theme 'dracula t)
	)
    #+end_src
** Atom
    #+begin_src emacs-lisp
	(use-package atom-one-dark-theme
	:config
	;;   (load-theme 'atom-one-dark t)
	)
    #+end_src
** Doom Emacs Themes
    #+begin_src emacs-lisp
      (use-package doom-themes
	:config
	    ;; Global settings (defaults)
	    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
		    doom-themes-enable-italic t) ; if nil, italics is universally disabled
	    (load-theme 'doom-one t)

	    ;; Enable flashing mode-line on errors
	    ;; (doom-themes-visual-bell-config)
	    ;; Enable custom neotree theme (all-the-icons must be installed!)
	    ;; (doom-themes-neotree-config)
	    ;; or for treemacs users
	    ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
	    ;; (doom-themes-treemacs-config)
	    ;; Corrects (and improves) org-mode's native fontification.
	    (doom-themes-org-config))
    #+end_src

* Configuration
** Line Numbers
    #+begin_src emacs-lisp
	(global-display-line-numbers-mode 1)
	(setq display-line-numbers-type 'relative)
    #+end_src
*** Don't Show Line Numbers in certain modes
      #+begin_src emacs-lisp
	(dolist
	  (mode
	    '(term-mode-hook eshell-mode-hook shell-mode-hook)
	  )
	  (add-hook mode (lambda () (display-line-numbers-mode 0)))
	)
      #+end_src

** Show Column Number Information In the Status Bar
    #+begin_src emacs-lisp
      (column-number-mode)
    #+end_src

** Disable UI elements of emacs GUI
    #+begin_src emacs-lisp
	(menu-bar-mode -1)
	(scroll-bar-mode -1)
	(tool-bar-mode -1)
    #+end_src

** Don't show splash screen on Startup
    #+begin_src emacs-lisp
	(setq inhibit-startup-screen t)
    #+end_src

** Disable Bell Ring
    #+begin_src emacs-lisp
      	(setq ring-bell-function 'ignore)
    #+end_src

* Key-bindings
** Get out of a mode with a single <ESCAPE> key rather then 3
    #+begin_src emacs-lisp
	(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
    #+end_src

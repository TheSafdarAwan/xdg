* Enable Debugging

#+begin_src emacs-lisp

  (setq debug-on-error t
        debug-on-signal nil
        debug-on-quit nil)

#+end_src

* Bootstrap Packages Archive's

#+begin_src emacs-lisp

  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (package-initialize)

#+end_src

* Package Manager 

#+begin_src emacs-lisp

  (unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

  ;; ensure that packages are installed
  (require 'use-package-ensure)
  ;; OR
  ;; (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Update Packages

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-jpackage-update-at-time "11:00"))

#+end_src

* Startup Performance

  This section is where it make emacs faster to load.

** Garbage collection

Makes startup faster by reducing the frequency of garbage collection
+ ivy-posframe-display-at-frame-top-center

=Note=: If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+begin_src emacs-lisp

  (use-package ivy-posframe
    :diminish ivy-posframe-mode
    :init
    (setq ivy-posframe-display-functions-alist
          '((swiper                     . ivy-posframe-display-at-point)
            (complete-symbol            . ivy-posframe-display-at-point)
            (counsel-M-x                . ivy-display-function-fallback)
            (counsel-esh-history        . ivy-posframe-display-at-window-center)
            (counsel-describe-function  . ivy-display-function-fallback)
            (counsel-describe-variable  . ivy-display-function-fallback)
            (counsel-find-file          . ivy-display-function-fallback)
            (counsel-recentf            . ivy-display-function-fallback)
            (counsel-register           . ivy-posframe-display-at-frame-bottom-window-center)
            (dmenu                      . ivy-posframe-display-at-frame-top-center)
            (nil                        . ivy-posframe-display))
          ivy-posframe-height-alist
          '((swiper . 20)
            (dmenu . 20)
            (t . 10)))
    :config
    (ivy-posframe-mode 1)) ; 1 enables posframe-mode, 0 disables it.

#+end_src

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* UI

** Icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :config
    ;; (set-fontset-font t 'unicode (font-spec :family "all-the-icons")
    ;; 		    nil 'append
    ;; 		    :foreground "#2AA198"))

#+end_src

*** Icons for Completion

#+begin_src emacs-lisp

  (use-package all-the-icons-ivy-rich
    :init
    (setq all-the-icons-ivy-rich-color-icon t)
    (all-the-icons-ivy-rich-mode 1))

#+end_src

** Themes

*** modus-themes 

#+begin_src emacs-lisp

  (use-package modus-themes)

#+end_src

*** Dracula

#+begin_src emacs-lisp

  (use-package dracula-theme
    :config
    ;;(load-theme 'dracula t)
    )

#+end_src

*** Atom

#+begin_src emacs-lisp

  (use-package atom-one-dark-theme
    :config
    ;; (load-theme 'atom-one-dark t)
    )

#+end_src

*** Doom Emacs Themes

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (load-theme 'doom-one t)
          ;; Enable flashing mode-line on errors
          ;; (doom-themes-visual-bell-config)
          ;; Enable custom neotree theme (all-the-icons must be installed!)
          ;; (doom-themes-neotree-config)
          ;; or for treemacs users
          ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
          ;; (doom-themes-treemacs-config)
          ;; Corrects (and improves) org-mode's native fontification.
          ;;(doom-themes-org-config)
  )

#+end_src

*** Solarized

#+begin_src emacs-lisp

  (use-package solarized-theme
    :config
    (load-theme 'solarized-dark t))

#+end_src

* Hydra

#+begin_src emacs-lisp

  (use-package hydra
    :init
    :config
    (defhydra hydra-zoom (global-map "C-c z")
      "zoom"
      ("i" text-scale-increase "in")
      ("o" text-scale-decrease "out"))

    (defhydra hydra-buffer-menu (:color pink :hint nil)
      "
          ^Mark^             ^Unmark^           ^Actions^          ^Search
          ^^^^^^^^-----------------------------------------------------------------
          _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
          _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
          _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
          _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
          _~_: modified
          "
      ("m" Buffer-menu-mark)
      ("u" Buffer-menu-unmark)
      ("U" Buffer-menu-backup-unmark)
      ("d" Buffer-menu-delete)
      ("D" Buffer-menu-delete-backwards)
      ("s" Buffer-menu-save)
      ("~" Buffer-menu-not-modified)
      ("x" Buffer-menu-execute)
      ("b" Buffer-menu-bury)
      ("g" revert-buffer)
      ("T" Buffer-menu-toggle-files-only)
      ("O" Buffer-menu-multi-occur :color blue)
      ("I" Buffer-menu-isearch-buffers :color blue)
      ("R" Buffer-menu-isearch-buffers-regexp :color blue)
      ("c" nil "cancel")
      ("v" Buffer-menu-select "select" :color blue)
      ("o" Buffer-menu-other-window "other-window" :color blue)
      ("q" quit-window "quit" :color blue))

    (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body))

#+end_src

* Add Vim bindings

** evil-mode

#+begin_src emacs-lisp

  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    ;; (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'vterm-mode 'insert)
    ;; enable the undo functionality
    (evil-set-undo-system 'undo-redo) 
    (evil-define-key 'insert org-mode-map "\C-y" #'org-yank)
    ;; move through wraped lines, with need of using gj or gk
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

          ;; extend evil mode to other modes
          (defun rune/evil-hook()
              (dolist
                  (mode '(custom-mode
                          eshell-mode
                          git-rebase-mode
                          erc-mode
                          circe-server-mode
                          circe-chat-mode
                          circe-query-mode
                          sauron-mode
                          term-mode))
                  (add-to-list 'evil-emacs-state-modes mode))))

#+end_src

** Evil Surround

#+begin_src emacs-lisp

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

#+end_src

* Perspective

:investigate:

#+begin_src emacs-lisp

  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
    :config
    (persp-mode))

#+end_src

* Completion

** Mini Buffer Completion System

*** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :demand
    :bind(
          :map ivy-minibuffer-map
          ("TAB" . ivy-alt-done)
          ("C-l" . ivy-alt-done)
          ;; ("C-j" . ivy-next-line)
          ;; ("C-k" . ivy-previous-line)
          :map ivy-switch-buffer-map
          ("C-l" . ivy-done)
          ;; ("C-k" . ivy-previous-line)
          ("C-d" . ivy-switch-buffer-kill)
          :map ivy-reverse-i-search-map
          ;; ("C-k" . ivy-previous-line)
          ("C-d" . ivy-reverse-i-search-kill)
          )
    :init
    (setq ivy-re-builders-alist '((t . orderless-ivy-re-builder)))
    (add-to-list 'ivy-highlight-functions-alist
                 '(orderless-ivy-re-builder . orderless-ivy-highlight))
    :config
    (ivy-mode 1)
    )

#+end_src

*** Counsel

#+begin_src emacs-lisp

  (use-package counsel
    :bind (
           ("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ;; ("C-c f" . counsel-fzf)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)
           )
    :config
    (setq ivy-initial-inputs-alist nil) ;; don't start search with ^
    ;; add keymap for swiper
    (global-set-key (kbd "M-s") 'swiper)
    ;; buffer switcher
    (global-set-key (kbd "C-M-b") 'counsel-switch-buffer))	

  ;; extend ivy
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src

*** Orderless

#+begin_src emacs-lisp

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

*** Embark

#+begin_src emacs-lisp

  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    ;; (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

#+end_src

** Buffer Completion

*** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :init
    (setq company-minimum-prefix-length 1)
    (setq company-global-modes '(not erc-mode message-mode eshell-mode))
    (setq company-idle-delay
          (lambda () (if (company-in-string-or-comment) nil 0.3)))
    :config
    (add-hook 'after-init-hook 'global-company-mode))

#+end_src

* Language Support

#+begin_src emacs-lisp

  (use-package lua-mode)
  (use-package markdown-mode)

#+end_src

* Other Helpful Packages

** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)
           ;; (org-mode . rainbow-delimiters-mode)
           )
    )

#+end_src

** Helpful make documenation nice

#+begin_src emacs-lisp
  (use-package helpful
    :config
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)

    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function)

    ;; For ivy
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))

#+end_src

** Undo-tree to get undo functionality

#+begin_src emacs-lisp

  (use-package undo-tree
    :diminish global-undo-tree-mode
    :init
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist '(("." . "~/.cache/emacs-backup-files")))
    :config
    (global-undo-tree-mode 1))

#+end_src

* File Navigation

** Dired

*** add icon's

Add icons in dired, emacs builtin file browser..

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :init
    (setq all-the-icons-dired-monochrome nil)
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    )

#+end_src

*** Dired-single

Don't open multiple buffers for dired directory navigation instead use only one.

#+begin_src emacs-lisp
  (use-package dired-single
    :config
    (defun my-dired-init ()
      "Bunch of stuff to run for dired, either immediately or when it's
          loaded."
      ;; <add other stuff here>
      (define-key dired-mode-map [remap dired-find-file]
        'dired-single-buffer)
      (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
        'dired-single-buffer-mouse)
      (define-key dired-mode-map [remap dired-up-directory]
        'dired-single-up-directory))

    ;; if dired's already loaded, then the keymap will be bound
    (if (boundp 'dired-mode-map)
        ;; we're good to go; just add our bindings
        (my-dired-init)
      ;; it's not loaded yet, so add our bindings to the load-hook
      (add-hook 'dired-load-hook 'my-dired-init))

    )
#+end_src

*** Change Dired Directory sorting

#+begin_src emacs-lisp

  (setq dired-listing-switches "-al --group-directories-first")

#+end_src

*** Move Deleted Files In Dired to System Trash

#+begin_src emacs-lisp

  (setq delete-by-moving-to-trash t)

#+end_src

*** Hide Dotfiles

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (define-key dired-mode-map [remap dired-do-hardlink]
      'dired-hide-dotfiles-mode)
    )

#+end_src

* Productivity

** pomidor

#+BEGIN_SRC emacs-lisp

  (use-package pomidor
    :bind (("<f12>" . pomidor))
    :config (setq pomidor-sound-tick nil
                  pomidor-sound-tack nil)
    :hook (pomidor-mode . (lambda ()
                            (display-line-numbers-mode -1) ; Emacs 26.1+
                            (setq left-fringe-width 0 right-fringe-width 0)
                            (setq left-margin-width 2 right-margin-width 0)
                            ;; force fringe update
                            (set-window-buffer nil (current-buffer)))))

#+END_SRC

* Note Taking

** Org

#+begin_src emacs-lisp

  (use-package org
    :config
    ;; (setq org-table-header-line-p t)
    (setq org-startup-with-inline-images t) ;; render images
    (setq org-hide-emphasis-markers t)
    (setq org-ellipsis " ▾")
    ;; (setq org-hide-block-startup t)
    (setq org-list-demote-modify-bullet
          '(("-" . "+") ("+" . "-") ("*" . "+")))
    (setq-default org-list-indent-offset 1)
    (setq org-yank-adjusted-subtrees t) ;; lets me use C-y as the C-c C-x C-y
    (setq org-list-allow-alphabetical t)
    ;; (setq org-yank-folded-subtrees nil) ;; don't fold when pasting org sub-trees
    ;; Set faces for heading levels

    ;; replace list hypehen(-) with dot
    (font-lock-add-keywords
     'org-mode
     '(("^ *\\([-]\\) "
        (0 (prog1 () (compose-region 
                      (match-beginning 1)
                      (match-end 1) "•"))))))

    ;; enable auto line breaking in org-mode
    ;; (add-hook 'org-mode-hook (lambda() ((turn-on-auto-fill))))

    ;; add org source block templates
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
    (add-to-list 'org-structure-template-alist '("lua" . "src lua"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("html" . "src html"))
    (add-to-list 'org-structure-template-alist '("css" . "src css"))
    (add-to-list 'org-structure-template-alist '("lisp" . "src lisp")))

#+end_src

*** buffer-face-mode

Enable ~buffer-face-mode~ in org files in order to customize buffer specific font config.

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook (lambda () (buffer-face-mode)))

#+end_src

*** Activate *org-indent-mode*

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))

#+end_src

*** Add Org keybindings.

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  ;; (global-set-key (kbd "C-c c") #'org-capture)

#+end_src

*** Tasks Keywords

#+begin_src emacs-lisp

  (setq org-todo-keywords
      '((sequence
          "TODO(t)"         ; A task that is ready to be tackled
          "WAIT(w)"         ; Something is holding up this task
          "DOING(d)"        ; When i am doing a task
          "|"               ; The pipe to separate "active" and "inactive" states
          "DONE(D)"         ; Task has been completed
          "CANCELLED(c)" ))); Task has been cancelled

#+end_src

*** TODO ??

#+begin_src emacs-lisp

  ;; (defvar-local my-icon-dir (concat user-emacs-directory "icons/")
  ;; "directory withthe icons")
  ;;   (setq org-agenda-category-icon-alist '(
  ;;   ("todo" ,(concat my-icon-dir "check-box.png") nil nil :ascent center)
  ;; ))

#+end_src

** Org Roam

#+begin_src emacs-lisp

  (use-package org-roam
    :init
    ;; (setq find-file-visit-truename t) ;; resolve the symalink problems
    (setq org-roam-directory (file-truename "~/safdar-local/org-roam-notes"))

    (setq org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:10}" 'face 'org-tag)))
    (setq org-roam-completion-everywhere t)	
    (setq org-roam-mode-sections
          (list #'org-roam-backlinks-section
                #'org-roam-reflinks-section
                #'org-roam-unlinked-references-section
                ))
    :custom
    ;; templates
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "${title}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    :config
    (org-roam-setup)
    (org-roam-db-autosync-mode)

    (defhydra hydra-org-roam ()
      "
          ^Node Actions^   ^Buffer^               ^Journal^         ^Capture
          ^^^^^^^^-------------------------------------------------------------------------
          _f_: Find node   _b t_: Buffer toggle    _j t_: Today     _c c_: Choose Node
          _i_: Insert Node _b d_: Dedicated buffer _j T_: Tomorrow  _c t_: Today Journal
          ^ ^              _b r_: Refresh Buffer   _j y_: Yesterday _c T_: Tomorrow Journal
          "
      ;; node
      ("f" org-roam-node-find nil)
      ("i" org-roam-node-insert nil)

      ;; buffer
      ("b t" org-roam-buffer-toggle nil)
      ("b d" org-roam-buffer-display-dedicated nil)
      ("b r" org-roam-buffer-refresh nil)

      ;; capture
      ("c c" org-roam-capture nil)
      ("c t" org-roam-dailies-capture-today nil)
      ("c T" org-roam-dailies-capture-tomorrow nil)

      ;; journal
      ("j t" org-roam-dailies-goto-today nil)
      ("j T" org-roam-dailies-goto-tomorrow nil)
      ("j y" org-roam-dailies-goto-yesterday nil))
    (global-set-key (kbd "C-c o") 'hydra-org-roam/body))

#+end_src

*** Org-roam-ui

#+begin_src emacs-lisp

  (use-package org-roam-ui)

#+end_src

** Org-bullets
#+begin_src emacs-lisp

  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :custom
    (org-bullets-bullet-list 
     '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

* Org Reading Mode

My minor mode for reading org mode documents.

- [ ] when you understand enough ~emacs-lisp~ write this function to enable margins in ~org-mode~ only, without having to enable it everywhere.

- [X] also hide the ~mode-line~

#+begin_src emacs-lisp

  (defun reading-mode ()
    (set-window-margins nil 8 8)
    (global-display-line-numbers-mode 0)
    (mode-line 0)
    ;; (hidden-mode-line-mode)
    )

  (defun no-reading-mode ()
    (set-window-margins nil 0 0)
    (global-display-line-numbers-mode 1)
    ;; (hidden-mode-line-mode)
    )

  (defhydra hydra-reading-mode ()
    "
             ^Reading Mode Commands^
    ^^^^^^^^-----------------------------------------
    _e_: Enable Reading Mode _d_: Disable Reading Mode   
    "
    ("e" (reading-mode) nil)
    ("d" (no-reading-mode) nil))
  (global-set-key (kbd "C-c p") 'hydra-reading-mode/body)

#+end_src

* Toggle Mode-line Mode

Toggle Mode Line

#+begin_src emacs-lisp

  (defvar-local hidden-mode-line-mode nil)

  (define-minor-mode hidden-mode-line-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable hidden-mode-line-mode
    :group 'editing-basics
    (if hidden-mode-line-mode
        (setq hide-mode-line mode-line-format
              mode-line-format nil)
      (setq mode-line-format hide-mode-line
            hide-mode-line nil))
    (force-mode-line-update)
    ;; Apparently force-mode-line-update is not always enough to
    ;; redisplay the mode-line
    (redraw-display)
    (when (and (called-interactively-p 'interactive)
               hidden-mode-line-mode)
      (run-with-idle-timer
       0 nil 'message
       (concat "Hidden Mode Line Mode enabled.  "
               "Use M-x hidden-mode-line-mode to make the mode-line appear."))))

  ;; If you want to hide the mode-line in every buffer by default
  ;; (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)

#+end_src

* Git

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :init
    (message "Loading Magit!")
    :config
    (message "Loaded Magit!")
    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status)))

#+end_src	    

* Cli

** Vterm

#+begin_src emacs-lisp

  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 5000)
  (use-package vterm)

#+end_src


* Configuration

** Enable Line Numbers

#+begin_src emacs-lisp

    (global-display-line-numbers-mode 1)
    (setq display-line-numbers-type 'relative)
    (add-hook 'after-change-major-mode-hook (lambda ()
                                       (menu-bar--display-line-numbers-mode-visual))) 


#+end_src

** Hide  Line Numbers in certain modes
#+begin_src emacs-lisp

  (dolist (mode '(term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook
                  neotree-mode-hook
                  dired-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Show Column Number Information In the Status Bar

#+begin_src emacs-lisp

  (column-number-mode)

#+end_src

** Disable UI elements of emacs GUI

#+begin_src emacs-lisp

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

#+end_src

** Don't show splash screen on Startup

#+begin_src emacs-lisp

  (setq inhibit-startup-screen t)

#+end_src

** Disable Bell Ring

#+begin_src emacs-lisp

  (setq ring-bell-function 'ignore)

#+end_src

** Disable Saving Lock Files
#+begin_src emacs-lisp
  

  (add-hook 'after-init-hook (lambda () (setq-default create-lockfiles nil)))

#+end_src

** Change The Backup files location
#+begin_src emacs-lisp

  (setq backup-directory-alist '(("." . "~/.cache/emacs-backup-files"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )

#+end_src

** Searching

#+BEGIN_SRC emacs-lisp

  (setq search-whitespace-regexp ".*")

#+END_SRC

** Enable SpellCheck

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook (lambda () (flyspell-mode 1)))

#+end_src

** Enable Auto Pairing

#+begin_src emacs-lisp

  (electric-pair-mode 1)

#+end_src

** Hide Minor Modes in Mode line

#+begin_src emacs-lisp

  (defun modeline-set-lighter (minor-mode lighter)
    (when (assq minor-mode minor-mode-alist)
      (setcar (cdr (assq minor-mode minor-mode-alist)) lighter)))

  (defun modeline-remove-lighter (minor-mode)
    (modeline-set-lighter minor-mode ""))

  (modeline-remove-lighter 'global-undo-tree-mode)
  (modeline-remove-lighter 'undo-tree-mode)
  (modeline-remove-lighter 'org-roam-ui-mode)
  (modeline-remove-lighter 'ivy-posframe-mode)
  (modeline-remove-lighter 'company-mode)
  (modeline-remove-lighter 'ivy-mode)
  (modeline-remove-lighter 'flyspell-mode)
  (modeline-remove-lighter 'buffer-face-mode)
  (modeline-remove-lighter 'org-table-header-line-mode)

#+end_src

** Disable Line Wrap in every major mode

#+begin_src emacs-lisp

  ;; solution 1
  ;; (add-hook 'after-change-major-mode-hook (lambda () (toggle-truncate-lines t))) 

  ;; solution 2
  ;; (setq-default word-wrap t)

  ;; solution 3
  (add-hook 'org-mode-hook 'visual-line-mode)

#+end_src

* Key-bindings

** Get out of a mode with a single <ESCAPE> key rather then 3

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Set C-x C-e to execute selected region

#+begin_src emacs-lisp

  (global-set-key (kbd "C-x C-e") 'eval-region)

#+end_src

** Describe Functions

#+begin_src emacs-lisp

  (defhydra hydra-describe-actions ()
    "
    ^Help^                 ^Font Lock^   
    ^^^^^^^^------------------------------
    _f_: Function          _F_: Face   
    _v_: Variable          _-_: Font
    _k_: Keymap
    "
    ;; help describe commands
    ("f" counsel-describe-function nil)
    ("v" counsel-describe-variable nil)
    ("k" describe-keymap nil)

    ;; describe font lock options
    ("-" describe-font nil)
    ("F" describe-face nil))
  (global-set-key (kbd "C-c d") 'hydra-describe-actions/body)

#+end_src

** Load/Disable Themes Easily

#+begin_src emacs-lisp

  (defhydra hydra-theme-actions ()
    "
    ^Theme Actions^ 
    ^^^^^^^^-------
    _l_: Load Theme
    _d_: Disable Them
    "
    ("l" load-theme nil)
    ("d" disable-theme nil))

  (global-set-key (kbd "C-c t") 'hydra-theme-actions/body)

#+end_src

* FONT Setting's

Emacs default font.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "FiraCode Nerd Font")

#+end_src

*** Org Mode font configuration

 Set the default font for the Org file type. This needs the ~buffer-face-mode~ turned on, to work, otherwise it won't effect the paragraph and some other buffer font faces. see: [[buffer-face-mode]]

**** Line Spacing

Add some space between lines

#+begin_src emacs-lisp

  (setq-default line-spacing 2)

#+end_src

**** Headings

Change the Org heading font

#+begin_src emacs-lisp

  (dolist (face '(
                  (org-level-1 . 1.9)
                  (org-level-2 . 1.7)
                  (org-level-3 . 1.6)
                  (org-level-4 . 1.4)
                  (org-level-5 . 1.4)
                  (org-level-6 . 1.4)
                  (org-level-7 . 1.4)
                  (org-level-8 . 1.4)))
    (set-face-attribute (car face) nil
                        :font "Lora" :weight 'Bold :height (cdr face))
    )

#+end_src

**** Paragraph & other text

~org-default~ face effect org paragraphs and some other text, if their font faces were not changed.

#+begin_src emacs-lisp

  (set-face-attribute 'org-default nil 
                      :font "Montserrat" 
                      :weight 'Regular
                      :height 1.1)

#+end_src

**** Code Blocks

#+begin_src emacs-lisp

  (set-face-attribute 'org-block nil 
                      :font "FiraCode Nerd Font" 
                      :background "#002630")

#+end_src

**** Other Faces

#+begin_src emacs-lisp

  (set-face-attribute 'org-table nil 
                      :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil 
                      :inherit 'fixed-pitch)
  (set-face-attribute 'org-verbatim nil 
                      :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-meta-line nil 
                      :inherit '(font-lock-comment-face fixed-pitch))

  ;; todo checkbox
  (set-face-attribute 'org-checkbox nil 
                      :font "FiraCode Nerd Font" 
                      :weight 'Bold 
                      :inherit 'fixed-pitch 
                      :height 0.7)

  ;; org table header, this appears when the table header is no longer in the screen view
  ;; this functin is a minor mode called ~org-table-header-line-mode~
  (set-face-attribute 'org-table-header nil 
                      :font "FiraCode Nerd Font" 
                      :weight 'Bold 
                      :height 1.0)

  ;; change the list items type style for example: 1., a, etc.
  (set-face-attribute 'org-list-dt nil 
                      :font "Lora" 
                      :weight 'Bold 
                      :height 1.0)

  ;; change the special property keywords
  (set-face-attribute 'org-special-keyword nil 
                      :font "Lato" 
                      :weight 'Bold 
                      :height 1.0)

  ;; document information
  (set-face-attribute 'org-document-title nil 
                      :font "FiraCode Nerd Font" 
                      :weight 'Bold 
                      :height 1.3)

  (set-face-attribute 'org-document-info-keyword nil 
                      :font "FiraCode Nerd Font" 
                      :weight 'Bold
                      :height 1.0)

#+end_src

**** TODO ??

#+begin_src emacs-lisp

  ;; (defun org-fontify-inline-src-block (limit)
  ;;     "Fontify inline source block."
  ;;     (when (re-search-forward org-babel-inline-src-block-regexp limit t)
  ;;     (add-text-properties
  ;;         (match-beginning 1) (match-end 0)
  ;;         '(font-lock-fontified t face (t (:foreground "#008ED1" :background "#FFFFEA"))))
  ;;     (org-remove-flyspell-overlays-in (match-beginning 0) (match-end 0))
  ;;     t))
  ;; ;; Inline source block
  ;; '(org-fontify-inline-src-block)

#+end_src

** Line Number's font configuration

#+begin_src emacs-lisp

  (set-face-attribute 'line-number-current-line nil 
                      :font "FiraCode Nerd Font" 
                      :weight 'Normal 
                      :height 1.0 
                      :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil 
                      :font "FiraCode Nerd Font" 
                      :weight 'Normal
                      :height 1.0 
                      :inherit 'fixed-pitch)

#+end_src

* Theme Tweaks

** Selection Color

Color for selected text. Emacs calls it =region=.

#+begin_src emacs-lisp

  (set-face-attribute 'region nil :background "#073642" :foreground nil)

#+end_src

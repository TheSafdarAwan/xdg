* Perspective

:investigate:

#+begin_src emacs-lisp

  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
    :config
    (persp-mode))

#+end_src


* Other Helpful Packages

** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)
           ;; (org-mode . rainbow-delimiters-mode)
           ))

#+end_src

** Helpful make documenation nice

#+begin_src emacs-lisp

  (use-package helpful
    :config
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)

    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function)

    ;; For ivy
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))

#+end_src

** Undo-tree to get undo functionality

#+begin_src emacs-lisp

  (use-package undo-tree
    :diminish global-undo-tree-mode
    :init
    (setq undo-tree-auto-save-history t)
    (setq undo-tree-history-directory-alist '(("." . "~/.cache/emacs-backup-files")))
    :config
    (global-undo-tree-mode 1))

#+end_src

* Toggle Mode-line Mode

Toggle Mode Line

#+begin_src emacs-lisp

  (defvar-local hidden-mode-line-mode nil)

  (define-minor-mode hidden-mode-line-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable hidden-mode-line-mode
    :group 'editing-basics
    (if hidden-mode-line-mode
        (setq hide-mode-line mode-line-format
              mode-line-format nil)
      (setq mode-line-format hide-mode-line
            hide-mode-line nil))
    (force-mode-line-update)
    ;; Apparently force-mode-line-update is not always enough to
    ;; redisplay the mode-line
    (redraw-display)
    (when (and (called-interactively-p 'interactive)
               hidden-mode-line-mode)
      (run-with-idle-timer
       0 nil 'message
       (concat "Hidden Mode Line Mode enabled.  "
               "Use M-x hidden-mode-line-mode to make the mode-line appear."))))

  ;; If you want to hide the mode-line in every buffer by default
  ;; (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)

#+end_src

* Git

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :init
    (message "Loading Magit!")
    :config
    (message "Loaded Magit!")
    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status)))

#+end_src	    

* Cli

** Vterm

#+begin_src emacs-lisp

  (setq shell-file-name "/bin/zsh"
        vterm-max-scrollback 5000)
  (use-package vterm)

#+end_src


* Configuration

** Enable Line Numbers

#+begin_src emacs-lisp

    (global-display-line-numbers-mode 1)
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode 1)

    (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () 
                    (menu-bar--display-line-numbers-mode-visual))))

#+end_src

** Hide  Line Numbers in certain modes
#+begin_src emacs-lisp

  (dolist (mode '(term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook
                  neotree-mode-hook
                  dired-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Show Column Number Information In the Status Bar

#+begin_src emacs-lisp

  (column-number-mode)

#+end_src

** Disable UI elements of emacs GUI

#+begin_src emacs-lisp

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

#+end_src

** Don't show splash screen on Startup

#+begin_src emacs-lisp

  (setq inhibit-startup-screen t)

#+end_src

** Disable Bell Ring

#+begin_src emacs-lisp

  (setq ring-bell-function 'ignore)

#+end_src

** Disable Saving Lock Files
#+begin_src emacs-lisp

  (add-hook 'after-init-hook (lambda () (setq-default create-lockfiles nil)))

#+end_src

** Change The Backup files location
#+begin_src emacs-lisp

  (setq backup-directory-alist '(("." . "~/.cache/emacs-backup-files"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )

#+end_src

** Searching

#+BEGIN_SRC emacs-lisp

  (setq search-whitespace-regexp ".*")

#+END_SRC

** Enable SpellCheck

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook (lambda () (flyspell-mode 1)))

#+end_src

** Enable Auto Pairing

#+begin_src emacs-lisp

  (electric-pair-mode 1)

#+end_src

** Hide Minor Modes in Mode line

#+begin_src emacs-lisp

  (defun modeline-set-lighter (minor-mode lighter)
    (when (assq minor-mode minor-mode-alist)
      (setcar (cdr (assq minor-mode minor-mode-alist)) lighter)))

  (defun modeline-remove-lighter (minor-mode)
    (modeline-set-lighter minor-mode ""))

  (modeline-remove-lighter 'global-undo-tree-mode)
  (modeline-remove-lighter 'undo-tree-mode)
  (modeline-remove-lighter 'org-roam-ui-mode)
  (modeline-remove-lighter 'ivy-posframe-mode)
  (modeline-remove-lighter 'company-mode)
  (modeline-remove-lighter 'ivy-mode)
  (modeline-remove-lighter 'flyspell-mode)
  (modeline-remove-lighter 'buffer-face-mode)
  (modeline-remove-lighter 'org-table-header-line-mode)

#+end_src

** Disable Line Wrap in every major mode

#+begin_src emacs-lisp

  ;; solution 1
  ;; (add-hook 'after-change-major-mode-hook (lambda () (toggle-truncate-lines t))) 

  ;; solution 2
  ;; (setq-default word-wrap t)

  ;; solution 3
  (add-hook 'org-mode-hook 'visual-line-mode)

#+end_src


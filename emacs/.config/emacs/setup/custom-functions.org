* Toggle Mode-line Mode

Toggle Mode Line

#+begin_src emacs-lisp

  (defvar-local hidden-mode-line-mode nil)

  (define-minor-mode hidden-mode-line-mode
    "Minor mode to hide the mode-line in the current buffer."
    :init-value nil
    :global t
    :variable hidden-mode-line-mode
    :group 'editing-basics
    (if hidden-mode-line-mode
        (setq hide-mode-line mode-line-format
              mode-line-format nil)
      (setq mode-line-format hide-mode-line
            hide-mode-line nil))
    (force-mode-line-update)
    ;; Apparently force-mode-line-update is not always enough to
    ;; redisplay the mode-line
    (redraw-display)
    (when (and (called-interactively-p 'interactive)
               hidden-mode-line-mode)
      (run-with-idle-timer
       0 nil 'message
       (concat "Hidden Mode Line Mode enabled.  "
               "Use M-x hidden-mode-line-mode to make the mode-line appear."))))

  ;; If you want to hide the mode-line in every buffer by default
  ;; (add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)

#+end_src

* Delete Current File

#+BEGIN_SRC lisp
   (defun xah-delete-current-file-make-backup ()
     "Delete current file, makes a backup~, close the buffer.
   If buffer is not a file, copy content to `kill-ring', delete buffer.
   If buffer is a file, the file's directory is shown with cursor at the next file.

   Backup filename is “‹name›~‹dateTimeStamp›~”. Existing file of the same name is overwritten. If buffer is not a file,
  the backup file name starts with “xx_”.

   Call `xah-open-last-closed' to open the backup file.

   URL `http://xahlee.info/emacs/emacs/elisp_delete-current-file.html'
   Version: 2018-05-15 2023-08-11 2023-10-28"
     (interactive)
     (when (eq major-mode 'dired-mode)
       (user-error "%s: In dired. Nothing is done." real-this-command))
     (let ((xfname buffer-file-name)
           (xbuffname (buffer-name))
           xbackupPath)
       (setq xbackupPath
             (concat (if xfname xfname (format "%sxx" default-directory))
                     (format "~%s~" (format-time-string "%Y-%m-%d_%H%M%S"))))
       (if xfname
           (progn
             (save-buffer xfname)
             (rename-file xfname xbackupPath t)
             (kill-buffer xbuffname)
             ;; (dired-jump nil xbackupPath)
             ;; (revert-buffer t t t)
             ;; (dired-goto-file xbackupPath)
             ;; (dired-next-line 1)
             (message "File deleted.
   Backup at
   %s
   Call `xah-open-last-closed' to open." xbackupPath)
             (when (boundp 'xah-recently-closed-buffers)
               (push (cons nil xbackupPath) xah-recently-closed-buffers)))
         (progn
           (widen)
           (kill-new (buffer-string))
           (kill-buffer xbuffname)
           (message "non-file buffer killed. buffer text copied to `kill-ring'."))))
     (when (eq major-mode 'dired-mode) (revert-buffer)))

#+END_SRC

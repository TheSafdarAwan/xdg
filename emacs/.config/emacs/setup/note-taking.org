* Productivity

** pomidor

#+BEGIN_SRC emacs-lisp

  (use-package pomidor
    :bind (("<f12>" . pomidor))
    :config (setq pomidor-sound-tick nil
                  pomidor-sound-tack nil)
    :hook (pomidor-mode . (lambda ()
                            (display-line-numbers-mode -1) ; Emacs 26.1+
                            (setq left-fringe-width 0 right-fringe-width 0)
                            (setq left-margin-width 2 right-margin-width 0)
                            ;; force fringe update
                            (set-window-buffer nil (current-buffer)))))

#+END_SRC


* Note Taking

** Org

#+begin_src emacs-lisp

  (use-package org
    :config
    (setq org-enforce-todo-dependencies t)
    (setq org-agenda-dim-blocked-tasks t)
    (setq org-enforce-todo-checkbox-dependencies t)

    (setq org-log-into-drawer t)

    (setq org-link-search-must-match-exact-headline nil)
    (setq org-id-link-to-org-use-id t)

    ;; (setq org-table-header-line-p t)
    (setq org-startup-with-inline-images t) ;; render images
    (setq org-hide-emphasis-markers t)

    (setq org-ellipsis " ▾")
    ;; (setq org-hide-block-startup t)
    (setq org-list-demote-modify-bullet
          '(("-" . "+") ("+" . "-") ("*" . "+")))

    (setq-default org-list-indent-offset 1)
    (setq org-yank-adjusted-subtrees t) ;; lets me use C-y as the C-c C-x C-y
    (setq org-list-allow-alphabetical t)
    ;; (setq org-yank-folded-subtrees nil) ;; don't fold when pasting org sub-trees
    ;; Set faces for heading levels

    ;; replace list hypehen(-) with dot
    (font-lock-add-keywords
     'org-mode
     '(("^ *\\([-]\\) "
        (0 (prog1 () (compose-region 
                      (match-beginning 1)
                      (match-end 1) "•"))))))

    ;; enable auto line breaking in org-mode
    ;; (add-hook 'org-mode-hook (lambda() ((turn-on-auto-fill))))
    )

#+end_src

*** SRC snippets

#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "SRC shell"))
  (add-to-list 'org-structure-template-alist '("el" . "SRC emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("js" . "SRC javascript"))
  (add-to-list 'org-structure-template-alist '("lua" . "SRC lua"))
  (add-to-list 'org-structure-template-alist '("py" . "SRC python"))
  (add-to-list 'org-structure-template-alist '("html" . "SRC html"))
  (add-to-list 'org-structure-template-alist '("css" . "SRC css"))
  (add-to-list 'org-structure-template-alist '("lisp" . "SRC lisp"))

#+end_src

*** buffer-face-mode

Enable ~buffer-face-mode~ in org files in order to customize buffer specific font config.

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook (lambda () (buffer-face-mode)))

#+end_src

*** Activate *org-indent-mode*

#+begin_src emacs-lisp

  (add-hook 'org-mode-hook (lambda () (org-indent-mode 1)))

#+end_src

*** Add Org keybindings.
:PROPERTIES:
:ID:       2f84b850-334b-4494-ab2e-1fcfd6e833d7
:END:

#+begin_src emacs-lisp

  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  ;; (global-set-key (kbd "C-c c") #'org-capture)

  ;; use ~M-n~ and ~M-p~ to go through links in buffer
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "M-n") #'org-next-link)
    (define-key org-mode-map (kbd "M-p") #'org-previous-link))


#+end_src

*** Tasks

**** Logging Tasks

Add closing time stamp when a task is done.

=NOTE=: currently not using this option, this is achieved by the [[id:2f84b850-334b-4494-ab2e-1fcfd6e833d7][Add Org keybindings]] using ~!~ and ~@~ in _global keywords_ and _fast access_ keys.

#+begin_SRC emacs-lisp

  ;; (add-hook 'org-mode-hook (lambda() (setq org-log-done 'time)))

#+end_SRC

**** Extend Tasks States
:PROPERTIES:
:ID:       f62cf80d-09ca-40e1-84be-4a9536e49f9f
:END:

   The vertical bar(~|~) separates the TODO keywords (states that _need action_) from the DONE states (which need _no further action_).  If you do not provide the separator bar, the last state is used as the DONE state.

  ~@~ is used for adding _logging notes_, ~!~ for _timestamp_ and ~/~ is a special case to add timestamp when _leaving_ this state.

#+begin_src emacs-lisp
  (setq org-todo-keywords '(
          (sequence "TODO(t)" "WAIT(w@/!)" "DOING(d!)" "|" "DONE(D@/!)" "CANCELLED(c@/!)")
          ;; (sequence "FIXME(f)" "BUG(b)" "|" "FIXED(F)")
          ))

#+end_src

**** Make tasks keywords look beautiful 

Setting Faces for tasks Keywords

#+begin_src emacs-lisp

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "#9ece6a" :weight Bold :box t))
          ("WAIT" . (:foreground "#7aa2f7" :weight Bold :box t))
          ("DOING" . (:foreground "#ff9e64" :weight Bold :box t))
          ("DONE" . (:foreground "#bb9af7" :weight Bold :box t))
          ("CANCELLED" . (:foreground "#bb9af7" :weight Bold :box t))))

#+end_src

**** TODO ??

#+begin_src emacs-lisp

  ;; (defvar-local my-icon-dir (concat user-emacs-directory "icons/")
  ;; "directory withthe icons")
  ;;   (setq org-agenda-category-icon-alist '(
  ;;   ("todo" ,(concat my-icon-dir "check-box.png") nil nil :ascent center)
  ;; ))

#+end_src

** Org Roam

#+begin_src emacs-lisp

  (use-package org-roam
    :init
    ;; (setq find-file-visit-truename t) ;; resolve the symalink problems
    (setq org-roam-directory (file-truename "~/safdar-local/org-roam-notes"))

    (setq org-roam-node-display-template
          (concat "${title:*} "
                  (propertize "${tags:10}" 'face 'org-tag)))
    (setq org-roam-completion-everywhere t)	
    (setq org-roam-mode-sections
          (list #'org-roam-backlinks-section
                #'org-roam-reflinks-section
                #'org-roam-unlinked-references-section
                ))
    :custom
    ;; templates
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "${title}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    :config
    (org-roam-setup)
    (org-roam-db-autosync-mode)

    (defhydra hydra-org-roam ()
      "
          ^Node Actions^   ^Buffer^               ^Journal^         ^Capture
          ^^^^^^^^-------------------------------------------------------------------------
          _f_: Find node   _b t_: Buffer toggle    _j t_: Today     _c c_: Choose Node
          _i_: Insert Node _b d_: Dedicated buffer _j T_: Tomorrow  _c t_: Today Journal
          ^ ^              _b r_: Refresh Buffer   _j y_: Yesterday _c T_: Tomorrow Journal
      "
      ;; node
      ("f" org-roam-node-find nil)
      ("i" org-roam-node-insert nil)

      ;; buffer
      ("b t" org-roam-buffer-toggle nil)
      ("b d" org-roam-buffer-display-dedicated nil)
      ("b r" org-roam-buffer-refresh nil)

      ;; capture
      ("c c" org-roam-capture nil)
      ("c t" org-roam-dailies-capture-today nil)
      ("c T" org-roam-dailies-capture-tomorrow nil)

      ;; journal
      ("j t" org-roam-dailies-goto-today nil)
      ("j T" org-roam-dailies-goto-tomorrow nil)
      ("j y" org-roam-dailies-goto-yesterday nil))
    (global-set-key (kbd "C-c o") 'hydra-org-roam/body))

#+end_src

*** Org-roam-ui

#+begin_src emacs-lisp

  (use-package org-roam-ui)

#+end_src

** Org-bullets
#+begin_src emacs-lisp

  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    :custom
    (org-bullets-bullet-list 
     '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Anki Integration

Write Anki cards  in org-mode

#+begin_src emacs-lisp

  (use-package anki-editor)

#+end_src

* Custom Functions for Reading and Writing Org files

** TODO 
- [ ] when you understand enough ~emacs-lisp~ write this function to enable margins in ~org-mode~ only, without having to enable it everywhere.
- [ ] also hide the ~mode-line~

#+begin_SRC emacs-lisp

  ;; change size of the org headlines faces
  (defun make-org-headings-small()
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.2)
                    (org-level-6 . 1.2)
                    (org-level-7 . 1.2)
                    (org-level-8 . 1.2)))
      (set-face-attribute (car face) nil
                          :font "Lora" :weight 'Bold :height (cdr face))))

  (defun make-org-headings-large()
    (dolist (face '((org-level-1 . 1.9)
                    (org-level-2 . 1.7)
                    (org-level-3 . 1.6)
                    (org-level-4 . 1.4)
                    (org-level-5 . 1.4)
                    (org-level-6 . 1.4)
                    (org-level-7 . 1.4)
                    (org-level-8 . 1.4)))
      (set-face-attribute (car face) nil
                          :font "Lora" :weight 'Bold :height (cdr face))))

  ;; make file look beautiful when reading
  (defun reading-mode ()
    (set-window-margins nil 8 8)
    (global-display-line-numbers-mode 0)
    (mode-line 0)
    ;; (hidden-mode-line-mode)
    )

  (defun no-reading-mode ()
    (set-window-margins nil 0 0)
    (global-display-line-numbers-mode 1)
    ;; (hidden-mode-line-mode)
    )

  (defhydra hydra-reading-mode ()
    "
                ^Reading Actions^               ^Writing Actions^
    ^^^^^^^^-----------------------------------------------------------------
            _e_: Enable Reading Mode        _h_: Make Headings small 
            _d_: Disable Reading Mode       _H_: Make Headings Large 
    "
    ("e" (reading-mode) nil)
    ("d" (no-reading-mode) nil)
    ("h" (make-org-headings-small) nil)
    ("H" (make-org-headings-large) nil)
  )
  (global-set-key (kbd "C-c p") 'hydra-reading-mode/body)

#+end_src
